@page "/services"
@inject HttpClient client
@inject IJSRuntime js
<h3>Services</h3>
<small>Add as many services as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="tenants/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (services == null)
{
    <text>Loading...</text>
}
else if (services.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Method</th>
                <th>Price</th>
                <th>Service</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Services t in services)
            {
            <tr>
                <td>@t.Id</td>
                <td>@t.MethodId</td>
                <td>@t.Price</td>
                <td>@t.Service</td>
                <td>
                    <a class="btn btn-success" href="services/edit/@t.Id">Edit</a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(t.Id))">Delete</button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}
@code {
    Services[] services { get; set; }
    protected override async Task OnInitializedAsync()
    {
        services = await client.GetFromJsonAsync<Services[]>("api/services");
    }
    async Task Delete(int servicesId)
    {
        var t = services.First(x => x.Id == servicesId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {t.Service}'s ({t.Id}) Record?"))
        {
            await client.DeleteAsync($"api/services/{servicesId}");
            await OnInitializedAsync();
        }
    }
}